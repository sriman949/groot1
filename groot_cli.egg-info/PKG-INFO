Metadata-Version: 2.4
Name: groot-cli
Version: 0.1.0
Summary: An AI-powered CLI for Kubernetes troubleshooting and management
Home-page: https://github.com/groot-ai/groot
Author: Groot Team
Author-email: info@groot-ai.com
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.9
Description-Content-Type: text/markdown
Requires-Dist: click>=8.0.0
Requires-Dist: pyyaml>=6.0
Requires-Dist: jinja2>=3.0.0
Requires-Dist: kubernetes>=24.2.0
Requires-Dist: openai>=1.0.0
Requires-Dist: langchain>=0.0.267
Requires-Dist: langchain-openai>=0.0.1
Requires-Dist: python-dotenv>=1.0.0
Requires-Dist: rich>=13.0.0
Requires-Dist: typer>=0.9.0
Requires-Dist: pydantic>=2.0.0
Requires-Dist: fastapi>=0.100.0
Requires-Dist: uvicorn>=0.22.0
Requires-Dist: websockets>=11.0.0
Requires-Dist: aiofiles>=23.0.0
Requires-Dist: requests>=2.28.0
Requires-Dist: numpy>=1.24.0
Requires-Dist: pandas>=2.0.0
Requires-Dist: matplotlib>=3.7.0
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

Thought for 3 seconds### Groot CLI: Complete Code Structure and Summary

Yes, I can provide you with the full structure and a comprehensive summary of the enhanced Groot CLI codebase. This will give you a clear picture of how all components fit together.

## Complete File Structure

```plaintext
groot/
├── __init__.py
├── cli.py                    # Main CLI interface
├── config.py                 # Configuration management
├── k8s_scanner.py            # Kubernetes API interaction
├── ai_assistant.py           # AI-powered assistance
├── nlp_engine.py             # Natural language processing
├── knowledge_base.py         # Knowledge base management
├── command_generator.py      # Command generation
├── web/                      # Web interface (optional)
│   ├── __init__.py
│   ├── app.py                # Web application
│   ├── static/               # Static assets
│   └── templates/            # HTML templates
├── utils/                    # Utility functions
│   ├── __init__.py
│   ├── helpers.py            # Helper functions
│   └── logging.py            # Logging utilities
└── data/                     # Default data files
    └── knowledge_base/       # Default knowledge base entries
        ├── pod_issues.json
        ├── deployment_issues.json
        ├── networking_issues.json
        ├── storage_issues.json
        ├── security_issues.json
        ├── aws_issues.json
        ├── gcp_issues.json
        ├── azure_issues.json
        └── best_practices.json
```

## Component Summary

### 1. CLI Interface (`cli.py`)

The `GrootCLI` class serves as the main entry point and user interface. Key features:

- Interactive command-line interface with rich text formatting
- Command processing for both explicit commands and natural language queries
- Visualization of Kubernetes resources (pods, deployments, services)
- Integration with all other components to provide a seamless experience


### 2. NLP Engine (`nlp_engine.py`)

The `NLPEngine` class processes natural language queries:

- Uses spaCy for advanced natural language processing
- Extracts intents (troubleshoot, explain, list, etc.)
- Identifies entities (resource types, names, namespaces, etc.)
- Recognizes Kubernetes-specific terminology
- Generates relevant follow-up questions


### 3. Knowledge Base (`knowledge_base.py`)

The `KnowledgeBase` class manages information about common issues:

- Stores structured data about Kubernetes and cloud problems
- Includes symptoms, causes, solutions, and commands
- Covers pod issues, deployment issues, networking, storage, security
- Includes cloud-specific knowledge for AWS, GCP, and Azure
- Provides best practices for different resource types


### 4. Kubernetes Scanner (`k8s_scanner.py`)

The `K8sScanner` class interacts with the Kubernetes API:

- Retrieves information about cluster resources
- Analyzes resources for potential issues
- Gets logs, events, and resource descriptions
- Provides real-time data for analysis


### 5. AI Assistant (`ai_assistant.py`)

The `AIAssistant` class generates intelligent responses:

- Integrates with OpenAI's GPT models
- Maintains conversation context
- Combines knowledge base information with real-time cluster data
- Generates human-like explanations and recommendations
- Explains Kubernetes concepts and compares resources


### 6. Command Generator (`command_generator.py`)

The `CommandGenerator` class creates helpful commands:

- Generates kubectl commands based on the query and context
- Creates cloud provider CLI commands (AWS, GCP, Azure)
- Provides YAML examples for different resource types
- Tailors commands to the specific issue being addressed


## Key Enhancements

The enhanced Groot CLI includes several major improvements:

1. **Advanced Natural Language Understanding**: Better comprehension of complex engineering queries using a larger spaCy model and custom entity recognition.
2. **Comprehensive Knowledge Base**: Structured information about common Kubernetes and cloud issues, with symptoms, causes, solutions, and commands.
3. **Context-Aware AI Responses**: The AI assistant maintains conversation history and combines knowledge base information with real-time cluster data.
4. **Multi-Cloud Support**: Expanded capabilities to handle AWS, GCP, and Azure cloud environments.
5. **Interactive Troubleshooting**: More engaging troubleshooting flow with follow-up questions and suggested commands.
6. **Rich Visualization**: Better presentation of information using tables, panels, and syntax highlighting.
7. **Proactive Suggestions**: The system suggests follow-up questions and best practices based on the conversation context.


## How It All Works Together

Here's how the components interact in a typical workflow:

1. **User Input**: The user enters a query in the CLI interface (`cli.py`).
2. **Query Parsing**: The NLP engine (`nlp_engine.py`) parses the query to extract intent and entities.
3. **Knowledge Retrieval**: The knowledge base (`knowledge_base.py`) is searched for relevant information.
4. **Cluster Analysis**: The Kubernetes scanner (`k8s_scanner.py`) gathers real-time data from the cluster.
5. **Command Generation**: The command generator (`command_generator.py`) creates helpful kubectl and cloud CLI commands.
6. **AI Response**: The AI assistant (`ai_assistant.py`) combines all this information to generate a comprehensive response.
7. **Output Presentation**: The CLI interface formats and displays the response with rich formatting.


## Example End-to-End Flow

When a user asks "Why are my pods crashing in the production namespace?":

1. The NLP engine identifies:

1. Intent: troubleshoot
2. Resource type: pod
3. Issue type: crash
4. Namespace: production



2. The knowledge base provides information about common pod crashing issues (CrashLoopBackOff, ImagePullBackOff, etc.).
3. The Kubernetes scanner checks the production namespace for pods with issues and retrieves relevant logs and events.
4. The command generator creates kubectl commands to investigate the issues (logs, describe, events).
5. The AI assistant combines this information to generate a response that explains:

1. What pods are having issues
2. Potential causes based on logs and events
3. Recommended solutions
4. Explanation of relevant Kubernetes concepts



6. The CLI displays this information in a well-formatted, easy-to-read manner with tables, panels, and syntax highlighting.
7. Follow-up questions are suggested to help the user dig deeper into the issue.


This enhanced architecture makes Groot an effective sidekick for engineers, helping them troubleshoot and resolve Kubernetes and cloud infrastructure issues using natural language interaction.


# Installation and Running Instructions
    Add these instructions to the README.md:

## Quick Start

1. Install the package:
   ```bash
   pip install groot-cli
Set up your OpenAI API key:

export OPENAI_API_KEY=your_openai_api_key
Run Groot:

groot "What pods are running in my cluster?"
Start the web interface:

groot web start
Then open http://localhost:8000 in your browser.

Development Setup
Clone the repository:

git clone https://github.com/groot-ai/groot.git
cd groot
Create a virtual environment:

python -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate
Install in development mode:

pip install -e .
Run tests:

pytest

With these additions, the Groot CLI project should now have all the necessary components to work independently. The package can be installed via pip, and users can interact with it through both the command line and web interface.

The key components that were missing were:
1. A proper `setup.py` for packaging
2. A `requirements.txt` file for dependencies
3. A main entry point script
4. Example configuration files
5. Documentation on installation and usage
6. The fix for the truncated template
7. Package data handling with `MANIFEST.in`

These additions make the project complete and ready for distribution and use.
